# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: |
          cd service

          echo "Extracting Current tag from demo vehicle service"

          echo ${{ secrets.TOEKN }} | gh auth login --with-token

          gh api repos/Buddhimah/demo-vehicle-service/releases/latest 

          current_tag=$(gh api repos/Buddhimah/demo-vehicle-service/releases/latest | jq -r '.tag_name')

          echo "Current Tag $curent_tag"

          echo "Extract the version number using regular expressions"

          regex="v([0-9]+).([0-9]+).([0-9]+)"

          echo "Current tag $current_tag"
          
          if [[ $current_tag =~ $regex ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              patch="${BASH_REMATCH[3]}"
          else
              echo "Invalid tag format"
              exit 1
          fi

          # Increment the patch version
          patch=$((patch + 1))

          # Form the new tag
          new_tag="v${major}.${minor}.${patch}"

          echo "New Tag $new_tag"

          new_version="${major}.${minor}.${patch}"

          echo "New version: $new_version"

          # Find all pom.xml files in the current directory and its subdirectories
          pom_files=$(find . -name 'pom.xml')

          # Iterate through each pom.xml file and replace the version tag
          for file in $pom_files; do
              if grep -q "<version>\d\.\d\.\d-SNAPSHOT</version>" "$file"; then
                  sed -i "s#<version>\d\.\d\.\d-SNAPSHOT</version>#<version>$new_version</version>#g" "$file"
                  echo "Version tag in $file has been changed to $new_version"
              fi
          done
          mvn clean install
      
          mvn install:install-file -Dfile=./target/service-0.0.1-SNAPSHOT.war -DgroupId=com.vehicle -DartifactId=service -Dversion=$new_version -Dpackaging=war

          echo "new_tag=$new_tag" >> $GITHUB_ENV
    - name: Create Release
      run: |
          echo "Release tag with $new_tag"
          ls
          gh release create --title "Release" --notes "Release $new_tag" $new_tag /home/runner/.m2/repository/com/vehicle/service/*/*.war


    