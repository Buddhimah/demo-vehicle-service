# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
# configure manual trigger
on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: |
          cd service
          mvn clean install
    - name: Create Release
      run: |
          echo ${{ secrets.TOEKN }} | gh auth login --with-token
          current_tag=$(gh api repos/Buddhimah/demo-vehicle-service/releases/latest | jq -r '.tag_name')


          echo "Extract the version number using regular expressions"

          regex="v([0-9]+).([0-9]+).([0-9]+)"

          echo "Current tag $current_tag"
          
          if [[ $current_tag =~ $regex ]]; then
              major="${BASH_REMATCH[1]}"
              minor="${BASH_REMATCH[2]}"
              patch="${BASH_REMATCH[3]}"
          else
              echo "Invalid tag format"
              exit 1
          fi

          # Increment the patch version
          patch=$((patch + 1))

          # Form the new tag
          new_tag="v${major}.${minor}.${patch}"

          echo "New Tag $new_tag"

          gh release create --title "Release" --notes "Release" $new_tag ./service/target/*.war


    